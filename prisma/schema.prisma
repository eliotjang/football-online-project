generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId Int    @id @default(autoincrement()) @map("account_id")
  email     String @unique @map("email")
  password  String @map("password")

  Character Character?

  @@map("account")
}

model Character {
  characterId       Int    @id @default(autoincrement()) @map("character_id")
  AccountId         Int    @unique @map("account_id")
  name              String @unique @map("name")
  cash              Int    @default(10000) @map("cash")
  releaseCount      Int    @default(0) @map("release_count")
  rankScore         Int    @default(1000) @map("rankScore")
  pityCount         Int    @default(0) @map("pityCount")

  CharacterPlayer CharacterPlayer[]
  Roster          Roster?
  TransferMarket TransferMarket[]

  Account Account @relation(fields: [AccountId], references: [accountId], onDelete: Cascade)

  @@map("character")
}

model CharacterPlayer {
  characterPlayerId Int @id @default(autoincrement()) @map("character_player_id")
  CharacterId       Int @map("character_id")
  playerId          Int @map("player_id")
  upgradeLevel      Int @default(0) @map("upgrade_level")
  playerCount       Int @default(0) @map("player_count")

  Character Character @relation(fields: [CharacterId], references: [characterId], onDelete: Cascade)

  @@map("character_player")
}

model Roster {
  rosterId            Int @id @default(autoincrement()) @map("roster_id")
  CharacterId         Int @unique @map("character_id")
  roster1PlayerId     Int @map("roster1_player_id")
  roster1UpgradeLevel Int @map("roster1_upgrade_level")
  roster2PlayerId     Int @map("roster2_player_id")
  roster2UpgradeLevel Int @map("roster2_upgrade_level")
  roster3PlayerId     Int @map("roster3_player_id")
  roster3UpgradeLevel Int @map("roster3_upgrade_level")

  Character Character @relation(fields: [CharacterId], references: [characterId], onDelete: Cascade)

  @@map("roster")
}

model GameRecord {
  gameRecordId      Int     @id @default(autoincrement()) @map("game_record_id")
  characterId1      Int     @map("character_id1")
  characterId2      Int     @map("character_id2")
  characterId1Win   Boolean @default(false) @map("character_id1_win")
  characterId1Draw  Boolean @default(false) @map("character_id1_Draw")
  characterId1Lose  Boolean @default(false) @map("character_id1_lose")
  characterId2Win   Boolean @default(false) @map("character_id2_win")
  characterId2Draw  Boolean @default(false) @map("character_id2_Draw")
  characterId2Lose  Boolean @default(false) @map("character_id2_lose")
  characterId1Score Int     @default(0) @map("character_id1_score")
  characterId2Score Int     @default(0) @map("character_id2_score")

  @@map("game_record")
}

model Player {
  playerId     Int    @map("player_id")
  upgradeLevel Int    @map("upgrade_level")
  playerName   String @map("player_name")
  playerSpeed  Int    @map("player_speed")
  goalDecision Int    @map("goal_decision")
  shootPower   Int    @map("shoot_power")
  defence      Int    @map("defence")
  stamina      Int    @map("stamina")
  rarity       Int    @map("rarity")
  value        Int    @map("value")

  @@id([playerId, upgradeLevel])
  @@map("player")
}

model TransferMarket {
  transferMarketId    Int     @id @unique @default(autoincrement()) @map("transfer_market_id")
  CharacterId         Int     @map("character_id")
  playerId            Int     @map("player_id")
  upgradeLevel        Int     @map("upgrade_level")
  offerCash           Int     @map("offer_cash")
  transferCharacterId Int?    @map("transfer_character_id") 
  transferStatus      Boolean @default(false)

  Character Character @relation(fields: [CharacterId], references: [characterId], onDelete: Cascade)


  @@map("transfer_market")
}